version: '3.8'

networks:
  datalake:
    driver: bridge

volumes:
  minio_data:
  postgres_data:
  kafka_data:
  zookeeper_data:
  spark_data:

services:
  # Storage Layer
  minio:
    image: minio/minio:latest
    container_name: datalake-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-password343}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - datalake
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      time: 20s
      retries: 3

  # Message Broker 
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: datalake-zookeeper
    environment:
      ZOOKEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      -  zookeeper_data:/var/lib/zookeeper
    networks:
      - datalake

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: datalake-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "19092:19092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKER://kafka:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka
    networks:
      - datalake

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: datalake-kafka-ui
    depends_on:
      - kafka
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:19092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - datalake

  # Schema Registry
  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: datalake-schema-ragistry
    depends_on:
      - kafka
    ports:
      - "8082:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVICES: kafka:19092
    networks:
      - datalake

  # Database
  postgres:
    image: postgres:15
    container_name: datalake-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-datalake_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-datalake_pass343}
      POSTGRES_DB: ${POSTGRES_DB:-datalake_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - datalake

  #Spark
  spark-master:
    build: ./infrastructure/docker/spark
    container_name: datalake-spark-master
    port:
      - "8080:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
    networks:
      - datalake

  # Airflow
  airflow:
    build: ./infrastructure/docker/airflow
    container_name: datalake-airflow
    depends_on:
      - postgres
    ports:
      - "8082:8080"
    networks:
      - datalake